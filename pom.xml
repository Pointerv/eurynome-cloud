<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2020-2030 ZHENGGENGWEI(码匠君)<herodotus@aliyun.com>
  ~
  ~ Dante Cloud Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  ~ Dante Cloud 采用APACHE LICENSE 2.0开源协议，您在使用过程中，需要注意以下几点：
  ~
  ~ 1.请不要删除和修改根目录下的LICENSE文件。
  ~ 2.请不要删除和修改 Dante Cloud 源码头部的版权声明。
  ~ 3.请保留源码和相关描述文件的项目出处，作者声明等。
  ~ 4.分发源码时候，请注明软件出处 https://gitee.com/dromara/dante-cloud
  ~ 5.在修改包名，模块名称，项目代码等时，请注明软件出处 https://gitee.com/dromara/dante-cloud
  ~ 6.若您的项目无法满足以上几点，可申请商业授权
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>cn.herodotus.dante</groupId>
        <artifactId>dependencies</artifactId>
        <version>3.3.0.0-M1</version>
        <relativePath>dependencies/pom.xml</relativePath>
    </parent>

    <artifactId>dante-cloud</artifactId>
    <packaging>pom</packaging>

    <name>dante-cloud</name>
    <description>Top Dante project pom.xml file</description>

    <properties>
        <!--配置参数-->
        <!--为了便于Docker的构建，减少上下文影响，将所有Docker资源放置在同一个目录中进行构建-->
        <docker.build.directory>../../configurations/docker/context/target</docker.build.directory>
        <docker.resource.name>${project.build.finalName}.${project.packaging}</docker.resource.name>
    </properties>

    <!-- 环境 -->
    <profiles>
        <!-- 开发 -->
        <profile>
            <id>development</id>
            <activation>
                <!--默认激活配置-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--当前环境-->
                <profile>development</profile>
                <database>postgresql</database>
                <!--基础设施：tencent、alibaba、spring-->
                <facility>alibaba</facility>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>true</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>true</skip.build.git.commit.info>
                <!--Spring Cloud Alibaba配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <alibaba.namespace></alibaba.namespace>
                <!--Spring Cloud Alibaba配置中心地址-->
                <alibaba.config.server-addr>192.168.101.10:8848</alibaba.config.server-addr>
                <!--Spring Cloud Alibaba服务发现地址-->
                <alibaba.discovery.server-addr>192.168.101.10:8848</alibaba.discovery.server-addr>
                <alibaba.sentinel.server-addr>192.168.101.10:8858</alibaba.sentinel.server-addr>
                <tencent.polaris.namespace>default</tencent.polaris.namespace>
                <!--Spring Cloud Tencent 配置 【(8091)grpc/tcp，默认注册中心端口;(8090)http/tcp，默认注册中心端口】-->
                <tencent.polaris.server-addr>192.168.101.10:8091</tencent.polaris.server-addr>
                <!--Spring Cloud Tencent Config 配置 【(8093)grpc/tcp，默认配置中心端口】-->
                <tencent.polaris.config-addr>192.168.101.10:8093</tencent.polaris.config-addr>
                <!--Spring Cloud Tencent 本地缓存目录-->
                <tencent.polaris.local.dir>./configurations/backup/cache</tencent.polaris.local.dir>
                <!--Spring Cloud Tencent 动态配置数据源类型 polaris: 从北极星服务端获取配置文件 local: 从本地磁盘读取配置文件-->
                <tencent.polaris.data.source>polaris</tencent.polaris.data.source>
            </properties>
        </profile>
        <!-- Docker -->
        <profile>
            <id>docker</id>
            <properties>
                <!--当前环境-->
                <profile>docker</profile>
                <!--数据库类型-->
                <database>postgresql</database>
                <!--基础设施：tencent、alibaba、spring-->
                <facility>tencent</facility>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>true</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <!--Spring Cloud Alibaba配置中心地址-->
                <alibaba.config.server-addr>192.168.101.10:8848</alibaba.config.server-addr>
                <!--Spring Cloud Alibaba配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <alibaba.namespace></alibaba.namespace>
                <!--Spring Cloud Alibaba服务发现地址-->
                <alibaba.discovery.server-addr>192.168.101.10:8848</alibaba.discovery.server-addr>
                <alibaba.sentinel.server-addr>192.168.101.10:8858</alibaba.sentinel.server-addr>
                <!--Spring Cloud Tencent 配置 【(8091)grpc/tcp，默认注册中心端口;(8090)http/tcp，默认注册中心端口】-->
                <tencent.polaris.server-addr>192.168.101.10:8091</tencent.polaris.server-addr>
                <!--Spring Cloud Tencent Config 配置 【(8093)grpc/tcp，默认配置中心端口】-->
                <tencent.polaris.config-addr>192.168.101.10:8093</tencent.polaris.config-addr>
                <tencent.polaris.namespace>default</tencent.polaris.namespace>
                <!--Spring Cloud Tencent 本地缓存目录-->
                <tencent.polaris.local.dir>./configurations/backup/cache</tencent.polaris.local.dir>
                <!--Spring Cloud Tencent 动态配置数据源类型 polaris: 从北极星服务端获取配置文件 local: 从本地磁盘读取配置文件-->
                <tencent.polaris.data.source>polaris</tencent.polaris.data.source>
            </properties>
        </profile>
        <!-- 生产 -->
        <profile>
            <id>production</id>
            <properties>
                <!--当前环境-->
                <profile>production</profile>
                <database>mysql8</database>
                <!--基础设施：tencent、alibaba、spring-->
                <facility>tencent</facility>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>true</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <!--Spring Cloud Alibaba配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <!--<alibaba.namespace>8fdcc073-2e51-4722-8274-3f5b76362bb8</alibaba.namespace>-->
                <alibaba.namespace></alibaba.namespace>
                <!--Spring Cloud Alibaba配置中心地址-->
                <alibaba.config.server-addr>192.168.101.10:8848</alibaba.config.server-addr>
                <!--Spring Cloud Alibaba服务发现地址-->
                <alibaba.discovery.server-addr>192.168.101.10:8848</alibaba.discovery.server-addr>
                <alibaba.sentinel.server-addr>192.168.101.10:8858</alibaba.sentinel.server-addr>
                <tencent.polaris.namespace>default</tencent.polaris.namespace>
                <!--Spring Cloud Tencent 配置 【(8091)grpc/tcp，默认注册中心端口;(8090)http/tcp，默认注册中心端口】-->
                <tencent.polaris.server-addr>192.168.101.10:8091</tencent.polaris.server-addr>
                <!--Spring Cloud Tencent Config 配置 【(8093)grpc/tcp，默认配置中心端口】-->
                <tencent.polaris.config-addr>192.168.101.10:8093</tencent.polaris.config-addr>
                <!--Spring Cloud Tencent 本地缓存目录-->
                <tencent.polaris.local.dir>./configurations/backup/cache</tencent.polaris.local.dir>
                <!--Spring Cloud Tencent 动态配置数据源类型 polaris: 从北极星服务端获取配置文件 local: 从本地磁盘读取配置文件-->
                <tencent.polaris.data.source>polaris</tencent.polaris.data.source>
            </properties>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                    <configuration>
                        <skip>${skip.copy.docker.resource}</skip>
                    </configuration>
                    <executions>
                        <execution>
                            <id>delete-jar-file</id>
                            <phase>pre-clean</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <delete file="${docker.build.directory}/${docker.resource.name}"/>
                                </target>
                            </configuration>
                        </execution>
                        <execution>
                            <id>prepare-docker-resource</id>
                            <phase>package</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <!--jar包保存位置 -->
                                    <copy todir="${docker.build.directory}">
                                        <fileset dir="${project.basedir}/target">
                                            <include name="${docker.resource.name}"/>
                                        </fileset>
                                    </copy>
                                </target>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>io.github.git-commit-id</groupId>
                    <artifactId>git-commit-id-maven-plugin</artifactId>
                    <configuration>
                        <skip>${skip.build.git.commit.info}</skip>
                        <!-- 检查的仓库根目录，${project.basedir}：项目根目录，即包含pom.xml文件的目录 -->
                        <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                        <!-- 生成git属性文件，默认false：不生成 -->
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <dateFormat>yyyy-MM-dd HH:mm:ss</dateFormat>
                        <gitDescribe>
                            <skip>false</skip>
                            <always>false</always>
                            <dirty>-dirty</dirty>
                        </gitDescribe>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <configuration>
                    <skipSource>${skip.build.source.package}</skipSource>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <modules>
        <module>dependencies</module>
        <module>modules</module>
        <module>packages</module>
        <module>platform</module>
        <module>services</module>
    </modules>
</project>